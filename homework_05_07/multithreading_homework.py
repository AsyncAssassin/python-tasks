"""
–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 5 –ø–æ —Ç–µ–º–µ 7: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –Ø–∑—ã–∫ Python –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
–¢–µ–º–∞: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –∏ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ—Å—Ç—å
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –í–ª–∞–¥–∏–º–∏—Ä –•–æ–º—É—Ç–æ–≤
–î–µ–¥–ª–∞–π–Ω: 1.11.25

–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é –≤ Python.
"""

import threading
import time
from typing import List, Callable
from datetime import datetime


class Task1Calculator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ó–∞–¥–∞–Ω–∏—è 1: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∏ –∫—É–±–æ–≤ —á–∏—Å–µ–ª.

    –°–æ–∑–¥–∞—ë—Ç 2 –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:
    - –ü–µ—Ä–≤—ã–π –ø–æ—Ç–æ–∫ –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10
    - –í—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–∫ –≤—ã—á–∏—Å–ª—è–µ—Ç –∫—É–±—ã —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10
    """

    def __init__(self, start: int = 1, end: int = 10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.

        Args:
            start: –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
            end: –ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        """
        self.start = start
        self.end = end
        self.squares_results = []
        self.cubes_results = []
        self.execution_time = 0

    def calculate_squares(self) -> None:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
        print(f"\n[{self._get_time()}]  –ü–æ—Ç–æ–∫ 1: –ù–∞—á–∞–ª–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–æ–≤")

        for i in range(self.start, self.end + 1):
            square = i ** 2
            self.squares_results.append((i, square))
            print(f"  –ö–≤–∞–¥—Ä–∞—Ç {i}¬≤ = {square}")
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

        print(f"[{self._get_time()}]  –ü–æ—Ç–æ–∫ 1: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def calculate_cubes(self) -> None:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫—É–±—ã —á–∏—Å–µ–ª –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
        print(f"\n[{self._get_time()}]  –ü–æ—Ç–æ–∫ 2: –ù–∞—á–∞–ª–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫—É–±–æ–≤")

        for i in range(self.start, self.end + 1):
            cube = i ** 3
            self.cubes_results.append((i, cube))
            print(f"  –ö—É–± {i}¬≥ = {cube}")
            time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

        print(f"[{self._get_time()}]  –ü–æ—Ç–æ–∫ 2: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫—É–±–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def run(self) -> dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–∞ –ø–æ—Ç–æ–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –æ–∂–∏–¥–∞–µ—Ç –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        print("\n" + "=" * 70)
        print("–ó–ê–î–ê–ù–ò–ï 1: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∏ –∫—É–±–æ–≤")
        print("=" * 70)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
        thread_squares = threading.Thread(target=self.calculate_squares, name="SquaresThread")
        thread_cubes = threading.Thread(target=self.calculate_cubes, name="CubesThread")

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        print("\n –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π...")
        start_time = time.time()

        thread_squares.start()
        thread_cubes.start()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        thread_squares.join()
        thread_cubes.join()

        self.execution_time = time.time() - start_time

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._print_results()

        return {
            'squares': self.squares_results,
            'cubes': self.cubes_results,
            'execution_time': self.execution_time
        }

    def _print_results(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏–π."""
        print("\n" + "=" * 70)
        print(" –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–î–ê–ù–ò–Ø 1")
        print("=" * 70)
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f" –ë–µ–∑ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏: ~{(self.end - self.start + 1) * 0.2:.2f} —Å–µ–∫—É–Ω–¥")
        print(f" –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ~{((self.end - self.start + 1) * 0.2) / self.execution_time:.1f}x")
        print("=" * 70)

    @staticmethod
    def _get_time() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS."""
        return datetime.now().strftime('%H:%M:%S')


class Task2NumberPrinter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ó–∞–¥–∞–Ω–∏—è 2: –í—ã–≤–æ–¥ —á–∏—Å–µ–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.

    –°–æ–∑–¥–∞—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–≤–æ–¥–∏—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    –æ—Ç 1 –¥–æ 10 —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 1 —Å–µ–∫—É–Ω–¥—É.
    """

    def __init__(self, num_threads: int = 3, start: int = 1, end: int = 10, delay: float = 1.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞.

        Args:
            num_threads: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            start: –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            end: –ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–≤–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.num_threads = num_threads
        self.start = start
        self.end = end
        self.delay = delay
        self.execution_time = 0
        self.threads: List[threading.Thread] = []

    def print_numbers(self, thread_id: int) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –æ—Ç start –¥–æ end —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.

        Args:
            thread_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞
        """
        print(f"\n[{self._get_time()}]  –ü–æ—Ç–æ–∫ {thread_id}: –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")

        for i in range(self.start, self.end + 1):
            current_time = self._get_time()
            print(f"  [{current_time}] –ü–æ—Ç–æ–∫ {thread_id} ‚Üí –ß–∏—Å–ª–æ: {i}")
            time.sleep(self.delay)

        print(f"[{self._get_time()}]  –ü–æ—Ç–æ–∫ {thread_id}: –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def run(self) -> dict:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–æ—Ç–æ–∫–∏, –æ–∂–∏–¥–∞–µ—Ç –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        """
        print("\n" + "=" * 70)
        print(f"–ó–ê–î–ê–ù–ò–ï 2: –í—ã–≤–æ–¥ —á–∏—Å–µ–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ({self.num_threads} –ø–æ—Ç–æ–∫–∞)")
        print("=" * 70)

        print(f"\n –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ {self.num_threads} –ø–æ—Ç–æ–∫–æ–≤...\n")
        start_time = time.time()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        for i in range(1, self.num_threads + 1):
            thread = threading.Thread(
                target=self.print_numbers,
                args=(i,),
                name=f"NumberThread-{i}"
            )
            self.threads.append(thread)
            thread.start()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in self.threads:
            thread.join()

        self.execution_time = time.time() - start_time

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._print_results()

        return {
            'num_threads': self.num_threads,
            'numbers_per_thread': self.end - self.start + 1,
            'execution_time': self.execution_time
        }

    def _print_results(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        sequential_time = self.num_threads * (self.end - self.start + 1) * self.delay

        print("\n" + "=" * 70)
        print(" –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–î–ê–ù–ò–Ø 2")
        print("=" * 70)
        print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f" –ë–µ–∑ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏: ~{sequential_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f" –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ~{sequential_time / self.execution_time:.1f}x")
        print(f" –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.num_threads} –ø–æ—Ç–æ–∫–æ–≤ √ó {self.end - self.start + 1} —á–∏—Å–µ–ª")
        print("=" * 70)

    @staticmethod
    def _get_time() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS."""
        return datetime.now().strftime('%H:%M:%S')


class MultithreadingDemo:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏–π –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π.

    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞.
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
        self.task1 = Task1Calculator()
        self.task2 = Task2NumberPrinter(num_threads=3)

    def run_all(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ."""
        print("\n" + "=" * 70)
        print("üéì –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï: –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–°–¢–¨ –í PYTHON")
        print("=" * 70)
        print("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –Ø–∑—ã–∫ Python –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        print("–¢–µ–º–∞: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –∏ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ—Å—Ç—å")
        print("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –í–ª–∞–¥–∏–º–∏—Ä –•–æ–º—É—Ç–æ–≤")
        print("=" * 70)

        # –ó–∞–¥–∞–Ω–∏–µ 1
        self.task1.run()

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏
        time.sleep(2)

        # –ó–∞–¥–∞–Ω–∏–µ 2
        self.task2.run()

        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self._print_summary()

    def run_task1_only(self) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ó–∞–¥–∞–Ω–∏–µ 1."""
        return self.task1.run()

    def run_task2_only(self) -> dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ó–∞–¥–∞–Ω–∏–µ 2."""
        return self.task2.run()

    def _print_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º."""
        print("\n" + "=" * 70)
        print(" –í–°–ï –ó–ê–î–ê–ù–ò–Ø –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù–´!")
        print("=" * 70)
        print("\n –ß–ï–ö-–õ–ò–°–¢ –°–ê–ú–û–ü–†–û–í–ï–†–ö–ò:")
        print("\n –ó–∞–¥–∞–Ω–∏–µ 1:")
        print("   ‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞—ë—Ç 2 –ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∏ –∫—É–±–æ–≤")
        print("   ‚úì –í—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç—ã –∏ –∫—É–±—ã —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10")
        print("   ‚úì –ü–æ—Ç–æ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        print("\n –ó–∞–¥–∞–Ω–∏–µ 2:")
        print("   ‚úì –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤")
        print("   ‚úì –ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∏—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10")
        print("   ‚úì –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–≤–æ–¥–∞–º–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É")
        print("   ‚úì –ü–æ—Ç–æ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        print("\n" + "=" * 70)
        print(" –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
        print("=" * 70 + "\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    demo = MultithreadingDemo()
    demo.run_all()


if __name__ == "__main__":
    main()